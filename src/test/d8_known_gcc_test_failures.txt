# Expected failures from running the assembled GCC torture tests with d8.

# Toolchain problem: need some libc support.
# Not yet implemented.
# See wasm.js for the list of libc functions which are missing.
# The right place to put libc functionality would really be libc anyways.
20020413-1.c.s.wast.wasm # __lttf2
960215-1.c.s.wast.wasm # __addtf3
960405-1.c.s.wast.wasm # __eqtf2
align-2.c.s.wast.wasm # __eqtf2
builtin-bitops-1.c.s.wast.wasm # __builtin_clrsb
complex-5.c.s.wast.wasm # __divsc3
ipa-sra-2.c.s.wast.wasm # free
loop-2f.c.s.wast.wasm # mmap addr 2147450880
loop-2g.c.s.wast.wasm # mmap addr 2147450880
pr34456.c.s.wast.wasm # qsort
pr47237.c.s.wast.wasm # __builtin_apply_args
pr49218.c.s.wast.wasm # __fixsfti
pr54471.c.s.wast.wasm # __multi3
printf-1.c.s.wast.wasm # printf
regstack-1.c.s.wast.wasm # __addtf3

# LLVM emits a divide by zero:
#   https://llvm.org/bugs/show_bug.cgi?id=26452
pr60960.c.s.wast.wasm # divide by zero

# Program terminated with: Terminating wasm: abort()
# This could be a problem in any part of the toolchain (not just d8).
# It should never happen (the torture tests are self-validating).
20000910-2.c.s.wast.wasm # abort()
20101011-1.c.s.wast.wasm # abort()
bitfld-3.c.s.wast.wasm # abort()
eeprof-1.c.s.wast.wasm # abort()
pr32244-1.c.s.wast.wasm # abort()
pr34971.c.s.wast.wasm # abort()
pr39228.c.s.wast.wasm # abort()
strcmp-1.c.s.wast.wasm # abort()
string-opt-5.c.s.wast.wasm # abort()
strncmp-1.c.s.wast.wasm # abort()

# Unknown exception: memory access out of bounds
20020406-1.c.s.wast.wasm # memory access out of bounds
20021120-3.c.s.wast.wasm # memory access out of bounds
20040709-1.c.s.wast.wasm # memory access out of bounds
20070201-1.c.s.wast.wasm # memory access out of bounds
20080502-1.c.s.wast.wasm # memory access out of bounds
20121108-1.c.s.wast.wasm # memory access out of bounds
920501-8.c.s.wast.wasm # memory access out of bounds
920501-9.c.s.wast.wasm # memory access out of bounds
920726-1.c.s.wast.wasm # memory access out of bounds
930513-1.c.s.wast.wasm # memory access out of bounds
980605-1.c.s.wast.wasm # memory access out of bounds
bitfld-5.c.s.wast.wasm # memory access out of bounds
complex-7.c.s.wast.wasm # memory access out of bounds
memcpy-1.c.s.wast.wasm # memory access out of bounds
multi-ix.c.s.wast.wasm # memory access out of bounds
pr28982b.c.s.wast.wams # memory access out of bounds
pr28982b.c.s.wast.wasm # memory access out of bounds
pr56982.c.s.wast.wasm # memory access out of bounds
stdarg-1.c.s.wast.wasm # memory access out of bounds
stdarg-2.c.s.wast.wasm # memory access out of bounds
struct-ret-1.c.s.wast.wasm # memory access out of bounds
va-arg-5.c.s.wast.wasm # memory access out of bounds
va-arg-6.c.s.wast.wasm # memory access out of bounds

# The following failures go away when disabling LLVM optimizations
20030125-1.c.s.wast.wasm # abort()
920612-1.c.s.wast.wasm # abort()
920711-1.c.s.wast.wasm # abort()
991201-1.c.s.wast.wasm # memory access out of bounds
bcp-1.c.s.wast.wasm # abort()
builtin-constant.c.s.wast.wasm # abort()
frame-address.c.s.wast.wasm # abort()
memcpy-2.c.s.wast.wasm # memory access out of bounds
mode-dependent-address.c.s.wast.wasm # memory access out of bounds
pr22493-1.c.s.wast.wasm # abort()
pr47337.c.s.wast.wasm # memory access out of bounds
pr48571-1.c.s.wast.wasm # memory access out of bounds
pr51581-1.c.s.wast.wasm # memory access out of bounds
pr51581-2.c.s.wast.wasm # memory access out of bounds
pr56837.c.s.wast.wasm # memory access out of bounds
strcpy-1.c.s.wast.wasm # memory access out of bounds
# Additionally there are a bunch of unexpected failures when disabling
# optimization, which this margin is too small to contain.
